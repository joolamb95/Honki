import React, { useEffect, useRef, useState } from "react";
import "../style/ChatModal.css";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../store";
import { addMessage, setMessages } from "../slice/ChatSlice";

interface ChatModalProps {
  tableNo: number;
  onSendMessage: (tableNo: number, content: string) => void;
  onClose: () => void;
}

const ChatModal: React.FC<ChatModalProps> = ({ tableNo, onSendMessage, onClose }) => {
  const dispatch = useDispatch();
  const chatMessages = useSelector((state: RootState) => state.chat.messages[tableNo] || []);
  const [inputText, setInputText] = useState("");
  const chatWindowRef = useRef<HTMLDivElement | null>(null);

  // ‚úÖ ÌôòÍ≤Ω Î≥ÄÏàòÏóêÏÑú API URL Î∂àÎü¨Ïò§Í∏∞
  const apiBaseUrl = import.meta.env.VITE_API_BASE_URL;

  // Í∏∞Ï°¥ Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    if (!apiBaseUrl) {
      console.error("üö® API Base URLÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
      return;
    }

    fetch(`${apiBaseUrl}/honki/chat/${tableNo}`)
      .then((res) => res.json())
      .then((data) => {
        console.log("üì© Í∏∞Ï°¥ Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞ ÏÑ±Í≥µ:", data);
        dispatch(setMessages({ tableNo, messages: data }));
      })
      .catch((err) => console.error("üö® Í∏∞Ï°¥ Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®:", err));
  }, [tableNo, dispatch, apiBaseUrl]);

  const handleSendMessage = () => {
    if (!inputText.trim()) return;

    console.log("[ÏÇ¨Ïû•Îãò] Î©îÏãúÏßÄ Ï†ÑÏÜ°:", inputText.trim());

    const newMessage = {
      tableNo,
      sender: "owner",
      content: inputText.trim(),
      timestamp: Date.now(),
    };

    // ReduxÏóê Î©îÏãúÏßÄ Ï∂îÍ∞Ä
    dispatch(addMessage(newMessage));
    // HallÏóêÏÑú Í¥ÄÎ¶¨ÌïòÎäî WebSocket Ïó∞Í≤∞ÏùÑ ÌÜµÌï¥ Î©îÏãúÏßÄ Ï†ÑÏÜ°
    onSendMessage(tableNo, inputText.trim());
    setInputText("");

    // Î©îÏãúÏßÄ Ï†ÑÏÜ° ÌõÑ Ïä§ÌÅ¨Î°§ Ï°∞Ï†ï
    setTimeout(() => {
      if (chatWindowRef.current) {
        chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;
      }
    }, 100);
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="chat-modal" onClick={(e) => e.stopPropagation()}>
        <div className="chat-header">
          <h2>{`ÌÖåÏù¥Î∏î ${tableNo}`}</h2>
          <button className="close-button" onClick={onClose}>√ó</button>
        </div>
        <div className="chat-window" ref={chatWindowRef}>
          {chatMessages.map((msg, index) => (
            <div
              key={index}
              className={`chat-message ${msg.sender === "owner" ? "owner-message" : "guest-message"}`}
            >
              {msg.content}
            </div>
          ))}
        </div>
        <div className="chat-input-container">
          <input
            type="text"
            className="chat-input"
            placeholder="Î©îÏãúÏßÄ ÏûÖÎ†•..."
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSendMessage()}
          />
          <button className="chat-send-button" onClick={handleSendMessage}>
            Î≥¥ÎÇ¥Í∏∞
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatModal;
